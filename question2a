// server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12345

int generateRandomNumber() {
    return rand() % 900 + 100; // Generates a random number between 100 and 999
}

int main() {
    int server_socket, client_socket, random_num;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);

    // Create socket
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Error in socket creation");
        exit(EXIT_FAILURE);
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Bind the socket to the specified address and port
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Error in binding");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_socket, 1) < 0) {
        perror("Error in listen");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server is waiting for a connection...\n");

    // Accept connection from the client
    client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_len);
    if (client_socket < 0) {
        perror("Error in accept");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Connection established with the client\n");

    // Generate and send a random number to the client
    random_num = generateRandomNumber();
    printf("Sending random number to the client: %d\n", random_num);

    send(client_socket, &random_num, sizeof(random_num), 0);

    // Close sockets and exit
    close(client_socket);
    close(server_socket);

    return 0;
}
